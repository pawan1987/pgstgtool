#!/usr/bin/env ruby

#begin # XXX: Remove this begin/rescue before distributing your app
require 'pgstgtool'
require 'gli'
require 'json'
require 'yaml'
#rescue LoadError
#  STDERR.puts "In development, you need to use `bundle exec bin/pgstgtool` to run your app"
#  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
#  STDERR.puts "Feel free to remove this message from bin/pgstgtool now"
#  exit 64
#end

class Pgstgtoolbin

  extend GLI::App

  program_desc 'Tool helps in managing staging end point for postgres application using lvm snapshot feature'

  version Pgstgtool::VERSION

  subcommand_option_handling :normal
  arguments :strict


  desc 'Create staging end point'
  arg_name 'appname'
  command :create do |c|


    c.desc 'Config file'
    c.flag [:f,:file]
    
    c.desc 'Log file'
    c.default_value 'stdout'
    c.flag [:logfile]
    
    c.desc 'log level'
    c.default_value 'Error'
    c.flag [:loglevel]

    c.desc 'Task Dir'
    c.flag [:taskdir]

    c.desc 'port'
    c.flag [:port]

    c.desc 'App prod mount point'
    c.flag [:proddir]

    c.desc 'App stage data directory'
    c.flag [:datadir]

    c.desc 'postgres version'
    c.flag [:version]

    c.desc 'Rake task to run post app stage end point start'
    c.flag [:task]

    c.action do |global_options,options,args|

     name = args.shift

     if not name
       raise 'App name should be passed as command line arguement'
     end

      global = {}
      
      app = {}
      
      apps = {}
      
      apps[name] = app
           
      app['task'] = options[:task] if options[:task]
      
      app['port'] = options[:port] if options[:port]
      
      app['datadir'] = options[:datadir] if options[:datadir]
      
      app['rakedir'] = options[:rakedir] if options[:rakedir]
      
      app['proddir'] = options[:proddir] if options[:proddir]
      
      app['version'] = options[:version] if options[:version]
      
      global['file'] = options[:file] if options[:file]
      global['logfile'] = options[:logfile] if options[:logfile]
      global['loglevel'] = options[:loglevel] if options[:loglevel]

      Pgstgtool::Apps.new({'override_apps' => apps,'override_global' => global,'name' => name}).create
      sleep 1

    end
  end
  

  desc 'Create all staging end point'
  command :create_all do |c|

    c.desc 'Config file'
    c.flag [:f,:file]
    
    c.desc 'Log file'
    c.default_value 'stdout'
    c.flag [:logfile]
    
    c.desc 'log level'
    c.default_value 'Error'
    c.flag [:loglevel]

    c.action do |global_options,options,args|

      global = {}
      
      global['file'] = options[:file] if options[:file]
      global['logfile'] = options[:logfile] if options[:logfile]
      global['loglevel'] = options[:loglevel] if options[:loglevel]

      Pgstgtool::Apps.new({'override_apps' => {},'override_global' => global,'name' => nil}).create
      sleep 1

    end
  end


  desc 'Delete staging end point on the host'
  arg_name 'appname'
  command :delete do |c|


    c.desc 'Config file'
    c.flag [:f,:file]

    c.desc 'Log file'
    c.default_value 'stdout'
    c.flag [:logfile]
    
    c.desc 'log level'
    c.default_value 'Error'
    c.flag [:loglevel]

    c.desc 'App stage data directory'
    c.flag [:datadir]

    c.desc 'postgres version'
    c.flag [:version]

    c.action do |global_options,options,args|

     name = args.shift

     if not name
       raise 'App name should be passed as command line arguement'
     end

      global = {}
      
      app = {}
      
      apps = {}
      
      apps[name] = app
      
      app['datadir'] = options[:datadir] if options[:datadir]
      
      app['version'] = options[:version] if options[:version]
      
      global['file'] = options[:file] if options[:file]
      global['logfile'] = options[:logfile] if options[:logfile]
      global['loglevel'] = options[:loglevel] if options[:loglevel]

      Pgstgtool::Apps.new({'override_apps' => apps,'override_global' => global,'name' => name}).delete
      sleep 1

    end
  end
 
  desc 'Create all staging end point'
  command :delete_all do |c|

    c.desc 'Config file'
    c.flag [:f,:file]
    
    c.desc 'Log file'
    c.default_value 'stdout'
    c.flag [:logfile]
    
    c.desc 'log level'
    c.default_value 'Info'
    c.flag [:loglevel]

    c.action do |global_options,options,args|

      global = {}
      
      global['file'] = options[:file] if options[:file]
      global['logfile'] = options[:logfile] if options[:logfile]
      global['loglevel'] = options[:loglevel] if options[:loglevel]

      Pgstgtool::Apps.new({'override_apps' => {},'override_global' => global,'name' => nil}).delete
      sleep 1

    end
  end
  
  desc 'Check status of staging end point'
  arg_name 'appname'
  command :status do |c|


    c.desc 'Config file'
    c.flag [:f,:file]
    
    c.desc 'Log file'
    c.default_value 'stdout'
    c.flag [:logfile]
    
    c.desc 'log level'
    c.default_value 'Warning'
    c.flag [:loglevel]

    c.action do |global_options,options,args|

     name = args.shift

     if not name
       raise 'App name should be passed as command line arguement'
     end

      global = {}
      global['file'] = options[:file] if options[:file]
      global['logfile'] = options[:logfile] if options[:logfile]
      global['loglevel'] = options[:loglevel] if options[:loglevel]
      puts Pgstgtool::Apps.new({'override_apps' => {name => {}},'override_global' => global,'name' => name}).status.to_yaml

    end
  end
  
  desc 'Check status of all staging end points'
  arg_name 'appname'
  command :status_all do |c|


    c.desc 'Config file'
    c.flag [:f,:file]
    
    c.desc 'Log file'
    c.default_value 'stdout'
    c.flag [:logfile]
    
    c.desc 'log level'
    c.default_value 'Warning'
    c.flag [:loglevel]

    c.action do |global_options,options,args|

      global = {}
      global['file'] = options[:file] if options[:file]
      global['logfile'] = options[:logfile] if options[:logfile]
      global['loglevel'] = options[:loglevel] if options[:loglevel]
      puts Pgstgtool::Apps.new({'override_apps' => {},'override_global' => global,'name' => nil}).status.to_yaml

    end
  end

  pre do |global,command,options,args|
    # Pre logic here
    # Return true to proceed; false to abort and not call the
    # chosen command
    # Use skips_pre before a command to skip this block
    # on that command only
    true
  end

  post do |global,command,options,args|
    # Post logic here
    # Use skips_post before a command to skip this
    # block on that command only
  end

  on_error do |exception|
    # Error logic here
    # return false to skip default error handling
    true
  end

  exit run(ARGV)
end

exit Pgstgtoolbin.run(ARGV)
